{"version":3,"file":"cqueue.min.js","sources":["cqueue.js"],"names":["global","deferred","promise","pCatch","pResolve","pReject","pThen","Promise","resolve","reject","apply","arguments","then","catch","Channel","this","queue","require","channel","prototype","constructor","put","arg","defer","length","push","take","pop","version","exports","module","define","cqueue"],"mappings":";;;;CAUA,SAAaA,GACb,YAWA,SAASC,KACR,GAAIC,GAASC,EAAQC,EAAUC,EAASC,CAexC,OAbAJ,GAAU,GAAIK,GAAS,SAAWC,EAASC,GAC1CL,EAAWI,EACXH,EAAWI,IAGZN,EAAS,WACR,MAAOD,GAAQ,SAASQ,MAAOR,EAASS,YAGzCL,EAAQ,WACP,MAAOJ,GAAQU,KAAKF,MAAOR,EAASS,aAG7BE,QAASV,EAAQK,QAASJ,EAAUK,OAAQJ,EAASO,KAAMN,GAoBpE,QAASQ,KACRC,KAAKC,SA9CN,GAAIT,GAAUU,QAAS,eAAgBV,QAkCnCW,EAAU,WACb,MAAO,IAAIJ,GAeZA,GAAQK,UAAUC,YAAcN,EAShCA,EAAQK,UAAUE,IAAM,SAAWC,GAClC,GAAIC,GAAQtB,GAWZ,OAT2B,KAAtBc,KAAKC,MAAMQ,QACfT,KAAKC,MAAMS,KAAMH,GAEjBC,EAAMf,SAAU,WAAY,QAG5Be,EAAMf,SAAU,QAAS,OAGnBe,GASRT,EAAQK,UAAUO,KAAO,WACxB,GAAIH,GAAQtB,GASZ,OANCsB,GAAMf,QADoB,IAAtBO,KAAKC,MAAMQ,QACC,QAAS,OAGT,WAAYT,KAAKC,MAAMW,QAGjCJ,GAQRT,EAAQK,UAAUS,QAAU,QAGL,mBAAXC,SACXC,OAAOD,QAAUX,EAES,kBAAVa,QAChBA,OAAQ,WACP,MAAOb,KAIRlB,EAAOgC,OAASd,GAEZH","sourcesContent":["/**\n * cqueue\n *\n * @author Jason Mulligan <jason.mulligan@avoidwork.com>\n * @copyright 2014 Jason Mulligan\n * @license BSD-3 <https://raw.github.com/avoidwork/cqueue/master/LICENSE>\n * @link http://avoidwork.github.io/cqueue\n * @module cqueue\n * @version 0.1.2\n */\n( function ( global ) {\n\"use strict\";\n\nvar Promise = require( \"es6-promise\" ).Promise;\n\n/**\n * \"Unboxed\" Promise factory\n *\n * @method factory\n * @memberOf promise\n * @return {Object} {@link Promise}\n */\nfunction deferred () {\n\tvar promise, pCatch, pResolve, pReject, pThen;\n\n\tpromise = new Promise( function ( resolve, reject ) {\n\t\tpResolve = resolve;\n\t\tpReject  = reject;\n\t} );\n\n\tpCatch = function () {\n\t\treturn promise[\"catch\"].apply( promise, arguments );\n\t};\n\n\tpThen = function () {\n\t\treturn promise.then.apply( promise, arguments );\n\t};\n\n\treturn {\"catch\": pCatch, resolve: pResolve, reject: pReject, then: pThen};\n}\n\n/**\n * Channel factory\n *\n * @method channel\n * @return {Object} Channel instance\n */\nvar channel = function () {\n\treturn new Channel();\n};\n\n/**\n * Channel\n *\n * @constructor\n * @private\n * @namespace abaaso\n */\nfunction Channel () {\n\tthis.queue = [];\n}\n\n// Setting constructor loop\nChannel.prototype.constructor = Channel;\n\n/**\n * Puts an item into the Channel\n *\n * @method put\n * @param  {Mixed} arg Item\n * @return {Array}     Deferred\n */\nChannel.prototype.put = function ( arg ) {\n\tvar defer = deferred();\n\n\tif ( this.queue.length === 0 ) {\n\t\tthis.queue.push( arg );\n\n\t\tdefer.resolve( [\"continue\", null] );\n\t}\n\telse {\n\t\tdefer.resolve( [\"pause\", null] );\n\t}\n\n\treturn defer;\n};\n\n/**\n * Takes an item from the Channel\n *\n * @method take\n * @return {Array} Deferred\n */\nChannel.prototype.take = function () {\n\tvar defer = deferred();\n\n\tif ( this.queue.length === 0 ) {\n\t\tdefer.resolve( [\"pause\", null] );\n\t}\n\telse {\n\t\tdefer.resolve( [\"continue\", this.queue.pop()] );\n\t}\n\n\treturn defer;\n};\n\n/**\n * Version property\n *\n * @type {String}\n */\nChannel.prototype.version = \"0.1.2\";\n\n// Node, AMD & window supported\nif ( typeof exports != \"undefined\" ) {\n\tmodule.exports = channel;\n}\nelse if ( typeof define == \"function\" ) {\n\tdefine( function () {\n\t\treturn channel;\n\t} );\n}\nelse {\n\tglobal.cqueue = channel;\n}\n} )( this );\n"]}